PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace, preprocessed source, and associated run script.
 #0 0x00007ff40fb5014e llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libLLVMSupport.so.12git+0x22014e)
 #1 0x00007ff40fb4de84 llvm::sys::RunSignalHandlers() (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libLLVMSupport.so.12git+0x21de84)
 #2 0x00007ff40fb4dfc8 SignalHandler(int) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libLLVMSupport.so.12git+0x21dfc8)
 #3 0x00007ff40f56c210 (/lib/x86_64-linux-gnu/libc.so.6+0x46210)
 #4 0x00007ff40e3aa90a clang::ASTRecordLayout::ASTRecordLayout(clang::ASTContext const&, clang::CharUnits, clang::CharUnits, clang::CharUnits, clang::CharUnits, clang::CharUnits, bool, bool, clang::CharUnits, clang::CharUnits, llvm::ArrayRef<unsigned long>, clang::CharUnits, clang::CharUnits, clang::CharUnits, clang::CharUnits, clang::CXXRecordDecl const*, bool, clang::CXXRecordDecl const*, bool, bool, llvm::DenseMap<clang::CXXRecordDecl const*, clang::CharUnits, llvm::DenseMapInfo<clang::CXXRecordDecl const*>, llvm::detail::DenseMapPair<clang::CXXRecordDecl const*, clang::CharUnits> > const&, llvm::DenseMap<clang::CXXRecordDecl const*, clang::ASTRecordLayout::VBaseInfo, llvm::DenseMapInfo<clang::CXXRecordDecl const*>, llvm::detail::DenseMapPair<clang::CXXRecordDecl const*, clang::ASTRecordLayout::VBaseInfo> > const&) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x73e90a)
 #5 0x00007ff40e3b7e4e clang::ASTContext::getASTRecordLayout(clang::RecordDecl const*) const (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x74be4e)
 #6 0x00007ff40e1f9120 HandleLValueMember((anonymous namespace)::EvalInfo&, clang::Expr const*, (anonymous namespace)::LValue&, clang::FieldDecl const*, clang::ASTRecordLayout const*) (.constprop.0) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x58d120)
 #7 0x00007ff40e23fb76 (anonymous namespace)::LValueExprEvaluator::VisitVarDecl(clang::Expr const*, clang::VarDecl const*) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x5d3b76)
 #8 0x00007ff40e226609 clang::StmtVisitorBase<llvm::make_const_ptr, (anonymous namespace)::LValueExprEvaluator, bool>::Visit(clang::Stmt const*) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x5ba609)
 #9 0x00007ff40e2269eb EvaluateLValue(clang::Expr const*, (anonymous namespace)::LValue&, (anonymous namespace)::EvalInfo&, bool) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x5ba9eb)
#10 0x00007ff40e275bd9 (anonymous namespace)::ExprEvaluatorBase<(anonymous namespace)::LValueExprEvaluator>::handleCallExpr(clang::CallExpr const*, clang::APValue&, (anonymous namespace)::LValue const*) (.constprop.0) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x609bd9)
#11 0x00007ff40e275fed (anonymous namespace)::ExprEvaluatorBase<(anonymous namespace)::LValueExprEvaluator>::VisitCallExpr(clang::CallExpr const*) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x609fed)
#12 0x00007ff40e22547a clang::StmtVisitorBase<llvm::make_const_ptr, (anonymous namespace)::LValueExprEvaluator, bool>::Visit(clang::Stmt const*) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x5b947a)
#13 0x00007ff40e2269eb EvaluateLValue(clang::Expr const*, (anonymous namespace)::LValue&, (anonymous namespace)::EvalInfo&, bool) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x5ba9eb)
#14 0x00007ff40e275bd9 (anonymous namespace)::ExprEvaluatorBase<(anonymous namespace)::LValueExprEvaluator>::handleCallExpr(clang::CallExpr const*, clang::APValue&, (anonymous namespace)::LValue const*) (.constprop.0) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x609bd9)
#15 0x00007ff40e275fed (anonymous namespace)::ExprEvaluatorBase<(anonymous namespace)::LValueExprEvaluator>::VisitCallExpr(clang::CallExpr const*) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x609fed)
#16 0x00007ff40e22547a clang::StmtVisitorBase<llvm::make_const_ptr, (anonymous namespace)::LValueExprEvaluator, bool>::Visit(clang::Stmt const*) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x5b947a)
#17 0x00007ff40e2269eb EvaluateLValue(clang::Expr const*, (anonymous namespace)::LValue&, (anonymous namespace)::EvalInfo&, bool) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x5ba9eb)
#18 0x00007ff40e275bd9 (anonymous namespace)::ExprEvaluatorBase<(anonymous namespace)::LValueExprEvaluator>::handleCallExpr(clang::CallExpr const*, clang::APValue&, (anonymous namespace)::LValue const*) (.constprop.0) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x609bd9)
#19 0x00007ff40e275fed (anonymous namespace)::ExprEvaluatorBase<(anonymous namespace)::LValueExprEvaluator>::VisitCallExpr(clang::CallExpr const*) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x609fed)
#20 0x00007ff40e22547a clang::StmtVisitorBase<llvm::make_const_ptr, (anonymous namespace)::LValueExprEvaluator, bool>::Visit(clang::Stmt const*) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x5b947a)
#21 0x00007ff40e22504f clang::StmtVisitorBase<llvm::make_const_ptr, (anonymous namespace)::LValueExprEvaluator, bool>::Visit(clang::Stmt const*) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x5b904f)
#22 0x00007ff40e2269eb EvaluateLValue(clang::Expr const*, (anonymous namespace)::LValue&, (anonymous namespace)::EvalInfo&, bool) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x5ba9eb)
#23 0x00007ff40e22d725 Evaluate(clang::APValue&, (anonymous namespace)::EvalInfo&, clang::Expr const*) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x5c1725)
#24 0x00007ff40e22e493 EvaluateIgnoredValue((anonymous namespace)::EvalInfo&, clang::Expr const*) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x5c2493)
#25 0x00007ff40e24c20c EvaluateStmt((anonymous namespace)::StmtResult&, (anonymous namespace)::EvalInfo&, clang::Stmt const*, clang::SwitchCase const*) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x5e020c)
#26 0x00007ff40e252183 EvaluateLoopBody((anonymous namespace)::StmtResult&, (anonymous namespace)::EvalInfo&, clang::Stmt const*, clang::SwitchCase const*) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x5e6183)
#27 0x00007ff40e24c5e1 EvaluateStmt((anonymous namespace)::StmtResult&, (anonymous namespace)::EvalInfo&, clang::Stmt const*, clang::SwitchCase const*) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x5e05e1)
#28 0x00007ff40e24bf60 EvaluateStmt((anonymous namespace)::StmtResult&, (anonymous namespace)::EvalInfo&, clang::Stmt const*, clang::SwitchCase const*) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x5dff60)
#29 0x00007ff40e252574 HandleFunctionCall(clang::SourceLocation, clang::FunctionDecl const*, (anonymous namespace)::LValue const*, llvm::ArrayRef<clang::Expr const*>, clang::Stmt const*, (anonymous namespace)::EvalInfo&, clang::APValue&, (anonymous namespace)::LValue const*) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x5e6574)
#30 0x00007ff40e279fab (anonymous namespace)::ExprEvaluatorBase<(anonymous namespace)::VoidExprEvaluator>::handleCallExpr(clang::CallExpr const*, clang::APValue&, (anonymous namespace)::LValue const*) (.constprop.0) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x60dfab)
#31 0x00007ff40e27aa07 (anonymous namespace)::VoidExprEvaluator::VisitCallExpr(clang::CallExpr const*) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x60ea07)
#32 0x00007ff40e27b969 clang::StmtVisitorBase<llvm::make_const_ptr, (anonymous namespace)::VoidExprEvaluator, bool>::Visit(clang::Stmt const*) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x60f969)
#33 0x00007ff40e22e269 Evaluate(clang::APValue&, (anonymous namespace)::EvalInfo&, clang::Expr const*) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x5c2269)
#34 0x00007ff40e22e493 EvaluateIgnoredValue((anonymous namespace)::EvalInfo&, clang::Expr const*) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x5c2493)
#35 0x00007ff40e24c20c EvaluateStmt((anonymous namespace)::StmtResult&, (anonymous namespace)::EvalInfo&, clang::Stmt const*, clang::SwitchCase const*) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x5e020c)
#36 0x00007ff40e252183 EvaluateLoopBody((anonymous namespace)::StmtResult&, (anonymous namespace)::EvalInfo&, clang::Stmt const*, clang::SwitchCase const*) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x5e6183)
#37 0x00007ff40e287c3a std::_Function_handler<void (), std::_Bind<EvaluateStmt((anonymous namespace)::StmtResult&, (anonymous namespace)::EvalInfo&, clang::Stmt const*, clang::SwitchCase const*)::'lambda'((anonymous namespace)::EvalInfo&, (anonymous namespace)::ScopeRAII<false>&, clang::ForStmt const*, (anonymous namespace)::StmtResult&, std::promise<(anonymous namespace)::EvalStmtResult>&) (std::reference_wrapper<(anonymous namespace)::EvalInfo>, std::reference_wrapper<(anonymous namespace)::ScopeRAII<false> >, clang::ForStmt const*, std::reference_wrapper<(anonymous namespace)::StmtResult>, std::reference_wrapper<std::promise<(anonymous namespace)::EvalStmtResult> >)> >::_M_invoke(std::_Any_data const&) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libclangAST.so.12git+0x61bc3a)
#38 0x00007ff40fae14c6 std::_Function_handler<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> (), std::__future_base::_Task_setter<std::unique_ptr<std::__future_base::_Result<void>, std::__future_base::_Result_base::_Deleter>, std::__future_base::_Task_state<std::function<void ()>, std::allocator<int>, void ()>::_M_run()::'lambda'(), void> >::_M_invoke(std::_Any_data const&) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libLLVMSupport.so.12git+0x1b14c6)
#39 0x00007ff40fabf35d std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter> ()>*, bool*) (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libLLVMSupport.so.12git+0x18f35d)
#40 0x00007ff40c82f47f __pthread_once_slow /build/glibc-eX1tMB/glibc-2.31/nptl/pthread_once.c:118:7
#41 0x00007ff40fae1de0 std::thread::_State_impl<std::thread::_Invoker<std::tuple<llvm::ThreadPool::ThreadPool(llvm::ThreadPoolStrategy)::'lambda'()> > >::_M_run() (/home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump/lib/libLLVMSupport.so.12git+0x1b1de0)
#42 0x00007ff40f7eed84 (/usr/lib/x86_64-linux-gnu/libstdc++.so.6+0xd6d84)
#43 0x00007ff40c826609 start_thread /build/glibc-eX1tMB/glibc-2.31/nptl/pthread_create.c:478:7
#44 0x00007ff40f648293 clone /build/glibc-eX1tMB/glibc-2.31/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:97:0
clang-12: error: unable to execute command: Segmentation fault (core dumped)
clang-12: error: clang frontend command failed due to signal (use -v to see invocation)
clang version 12.0.0 (https://github.com/llvm/llvm-project.git d6eb5bb352c64ef2d7cc57181f7d0341cffaed13)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /home/gozillon/Documents/Clang-LLVM/build-with-asserts_dump//bin
clang-12: note: diagnostic msg: 
********************

PLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:
Preprocessed source(s) and associated run script(s) are located at:
clang-12: note: diagnostic msg: /tmp/cexpr_mandelbrot-1fa615.cpp
clang-12: note: diagnostic msg: /tmp/cexpr_mandelbrot-1fa615.sh
clang-12: note: diagnostic msg: 

********************
